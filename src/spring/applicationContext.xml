<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    <!--引入资源-->
    <context:property-placeholder location="classpath:/resources/jdbc.properties"/>
    <!--自动扫描bean-->
    <context:component-scan base-package="com.nona.hotel.angularhotel.service,com.nona.hotel.angularhotel.util"/>
    <!--连接池配置-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--sessionFactory配置-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--指定扫描mapper.xml的位置-->
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
        <!--指定别名的实体类位置-->
        <property name="typeAliasesPackage" value="com.nona.hotel.angularhotel.pojo"/>
    </bean>

    <!--自动扫描mapper的配置-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--mapper文件对应的接口包位置-->
        <property name="basePackage" value="com.nona.hotel.angularhotel.mapper"/>
        <!--指定sqlsessionfactory-->
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置通知-->
    <!--
        get方法：只读
        select方法:只读
        事务传播行为类型


    事务传播行为类型               说明
    PROPAGATION_REQUIRED        如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
    PROPAGATION_SUPPORTS        支持当前事务，如果当前没有事务，就以非事务方式执行。
    PROPAGATION_MANDATORY       使用当前的事务，如果当前没有事务，就抛出异常。
    PROPAGATION_REQUIRES_NEW    新建事务，如果当前存在事务，把当前事务挂起。
    PROPAGATION_NOT_SUPPORTED   以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
    PROPAGATION_NEVER           以非事务方式执行，如果当前存在事务，则抛出异常。
    PROPAGATION_NESTED          如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。
    -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="update×" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
        </tx:attributes>
    </tx:advice>

    <!--切面配置-->
    <aop:config>
        <aop:advisor advice-ref="txAdvice"  pointcut="execution(* com.nona.hotel.angularhotel.service.impl.*.*(..))"/>
    </aop:config>

    <tx:annotation-driven transaction-manager="txManager"/>



</beans>